generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id     String   @id @default(uuid())
  secret String   @unique
  plays  Player[]
}

model Player {
  roomCode     String
  userSecret   String
  name         String
  color        String      @default("red")
  avatar       String      @default("/wolf_64.png")
  role         Role        @default(PLAYER)
  board        BoardTile[]
  room         Bingo       @relation(fields: [roomCode], references: [code])
  user         User        @relation(fields: [userSecret], references: [secret])
  createdTiles Tile[]

  @@id([roomCode, userSecret])
}

model Row {
  id    String           @id @default(uuid())
  tiles BoardTileToRow[]

  @@map("BoardRow")
}

model BoardTileToRow {
  tile           BoardTile @relation(fields: [boardTileId], references: [id])
  row           Row       @relation(fields: [rowId], references: [id])
  boardTileId String
  rowId       String

  @@unique([rowId, boardTileId])

  @@map("_BoardTileToRow")
}

model BoardTile {
  id         String           @id @default(uuid())
  tileId     String
  roomCode   String           @map("playerRoomCode")
  userSecret String           @map("playerUserSecret")
  player     Player           @relation(fields: [roomCode, userSecret], references: [roomCode, userSecret])
  tile       Tile             @relation(fields: [tileId], references: [id])
  rows       BoardTileToRow[]
  index      Int              @default(autoincrement())

  @@unique([roomCode, userSecret, index])
  @@unique([roomCode, userSecret, tileId]) // no duplicate tiles for user
}

model Tile {
  id         String      @id @default(uuid())
  content    String
  isComplete Boolean     @default(false)
  roomCode   String
  userSecret String
  createdAt  DateTime    @default(now())
  boards     BoardTile[]
  author     Player      @relation(fields: [roomCode, userSecret], references: [roomCode, userSecret])
}

enum WinCondition {
  FIRST_ROW
  ALL_ROWS
}

model Bingo {
  code               String       @id
  name               String
  state              State        @default(SETUP)
  players            Player[]
  isWithFreeTile     Boolean      @default(false)
  isWithHiddenBoards Boolean      @default(false)
  winCodition        WinCondition @default(FIRST_ROW)

  @@map("Room")
}

enum Role {
  GAME_MASTER
  PLAYER
}

enum State {
  SETUP
  LOCKED
  RUNNING
  DONE
}
