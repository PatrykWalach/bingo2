// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id    String   @id @default(uuid())
  plays Player[]

  secret String @unique
}

enum Role {
  GAME_MASTER
  PLAYER
}

enum State {
  SETUP
  LOCKED
  RUNNING
  DONE
}

model Player {
  room         Bingo       @relation(references: [code], fields: [roomCode])
  roomCode     String
  user         User        @relation(references: [secret], fields: [userSecret])
  userSecret   String
  name         String
  color        String      @default("red")
  avatar       String      @default("/wolf_64.png")
  role         Role        @default(PLAYER)
  board        BoardTile[]
  createdTiles Tile[]

  @@id([roomCode, userSecret])
}

model Row {
  id    String      @id @default(uuid())
  tiles BoardTile[]

  @@map("BoardRow")
}

model BoardTile {
  tile       Tile   @relation(fields: [tileId], references: [id])
  id         String @id @default(uuid())
  player     Player @relation(fields: [roomCode, userSecret], references: [roomCode, userSecret])
  tileId     String
  roomCode   String @map("playerRoomCode")
  userSecret String @map("playerUserSecret")

  rows  Row[]
  index Int   @default(autoincrement())

  @@unique([roomCode, userSecret, index])
  @@unique([roomCode, userSecret, tileId]) // no duplicate tiles for user
}

model Tile {
  id         String      @id @default(uuid())
  content    String
  isComplete Boolean     @default(false)
  boards     BoardTile[]
  author     Player      @relation(fields: [roomCode, userSecret], references: [roomCode, userSecret])
  roomCode   String
  userSecret String
  createdAt  DateTime    @default(now())
}

enum WinCondition {
  FIRST_ROW
  ALL_ROWS
}

model Bingo {
  code        String       @id
  name        String
  state       State        @default(SETUP)
  players     Player[]
  winCodition WinCondition @default(FIRST_ROW)

  @@map("Room")
}
