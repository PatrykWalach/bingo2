generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id     String   @id @default(uuid())
  secret String   @unique
  plays  Player[]
}

model Player {
  roomCode     String
  userSecret   String
  name         String
  color        String      @default("red")
  avatar       String      @default("/wolf_64.png")
  role         Role        @default(PLAYER)
  board        BoardTile[]
  room         Bingo       @relation(fields: [roomCode], references: [code])
  user         User        @relation(fields: [userSecret], references: [secret])
  createdTiles Tile[]

  @@id([roomCode, userSecret])
}

model BoardTile {
  id               Int    @id @default(autoincrement())
  tileId           String
  playerRoomCode   String
  playerUserSecret String
  player           Player @relation(fields: [playerRoomCode, playerUserSecret], references: [roomCode, userSecret])
  tile             Tile   @relation(fields: [tileId], references: [id])

  @@unique([playerRoomCode, playerUserSecret, tileId])
}

model Tile {
  id         String      @id @default(uuid())
  content    String
  isComplete Boolean     @default(false)
  roomCode   String
  userSecret String
  createdAt  DateTime    @default(now())
  boards     BoardTile[]
  author     Player      @relation(fields: [roomCode, userSecret], references: [roomCode, userSecret])
}

model Bingo {
  code    String   @id
  name    String
  state   State    @default(SETUP)
  players Player[]
  isWithFreeTile Boolean @default(false)

  @@map("Room")
}

enum Role {
  GAME_MASTER
  PLAYER
}

enum State {
  SETUP
  LOCKED
  RUNNING
  DONE
}
